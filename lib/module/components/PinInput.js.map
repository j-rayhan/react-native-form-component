{"version":3,"names":["React","View","StyleSheet","colors","FormItem","refs","PinInput","props","pin","setPin","useState","Array","numOfInput","fill","activeInput","setActiveInput","length","i","push","createRef","changeFocus","index","text","current","focus","styles","wrapper","style","map","_","formItem","onChangeText","toString","replace","input","borderBottomColor","black","lightgrey","textInputStyle","status","message","create","flexDirection","justifyContent","maxWidth","borderBottomWidth","textAlign","fontSize","backgroundColor","paddingLeft","paddingRight","minWidth"],"sources":["PinInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  TextInput,\n  TextStyle,\n  ViewStyle,\n  StyleProp,\n  TextInputProps,\n} from 'react-native';\n\nimport { colors } from '../colors';\nimport FormItem from './FormItem';\n\n// Define the prop types for the PinInput component\ninterface Props extends TextInputProps {\n  numOfInput: number;\n  onChangeText: (pin: string) => void;\n  textInputStyle?: TextStyle;\n  style?: StyleProp<ViewStyle>;\n}\n\n// Create an array of refs to store the TextInput refs\nconst refs: React.RefObject<TextInput>[] = [];\n\nexport default function PinInput(props: Props) {\n  // Set up state for the pin input and active input index\n  const [pin, setPin] = React.useState(Array(props.numOfInput).fill(''));\n  const [activeInput, setActiveInput] = React.useState(0);\n\n  // Initialize the refs array if it is empty\n  if (!refs.length) {\n    for (let i = 0; i < pin.length; i++) {\n      refs.push(React.createRef());\n    }\n  }\n\n  // Function to change focus between input fields\n  const changeFocus = (index: number, text: string) => {\n    if (text) refs[index + 1]?.current?.focus();\n    else refs[index - 1]?.current?.focus();\n  };\n\n  return (\n    <View style={[styles.wrapper, props.style]}>\n      {/* Render the PinInput fields */}\n      {pin.map((_, index) => (\n        <FormItem\n          {...props}\n          value={pin[index]}\n          style={styles.formItem}\n          onChangeText={(text) => {\n            // Update the pin array with the new input value\n            pin[index] = text;\n            setPin([...pin]);\n            // Change focus based on the input value\n            changeFocus(index, text);\n            // Call the onChangeText callback with the concatenated pin value\n            props.onChangeText(pin.toString().replace(/,/g, ''));\n          }}\n          textInputStyle={[\n            styles.input,\n            {\n              // Set the borderBottomColor based on the active input index\n              borderBottomColor:\n                activeInput === index ? colors.black : colors.lightgrey,\n            },\n            props.textInputStyle,\n          ]}\n          maxLength={1}\n          key={index}\n          ref={refs[index]}\n          onFocus={() => setActiveInput(index)}\n          customValidation={() => ({ status: true, message: '' })}\n        />\n      ))}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  input: {\n    maxWidth: 40,\n    borderBottomWidth: 1.5,\n    textAlign: 'center',\n    fontSize: 20,\n  },\n  formItem: {\n    backgroundColor: 'transparent',\n    paddingLeft: 0,\n    paddingRight: 0,\n    minWidth: 40,\n  },\n});\n"],"mappings":"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"}