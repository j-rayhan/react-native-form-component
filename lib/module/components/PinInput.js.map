{"version":3,"sources":["PinInput.tsx"],"names":["React","useState","createRef","View","StyleSheet","FormItem","refs","PinInput","props","pin","setPin","Array","numOfInput","fill","length","i","push","changeFocus","index","text","current","focus","styles","wrapper","map","_","backgroundColor","onChangeText","toString","replaceAll","formItem","create","flexDirection","maxWidth","borderBottomWidth","hairlineWidth","textAlign"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAAsD,OAAtD;AACA,SAASC,IAAT,EAAeC,UAAf,QAA4C,cAA5C;AACA,OAAOC,QAAP,MAAqB,YAArB;AAOA,MAAMC,IAA4B,GAAG,EAArC;AACA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAgC;AAC7C,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBT,QAAQ,CAACU,KAAK,CAACH,KAAK,CAACI,UAAP,CAAL,CAAwBC,IAAxB,CAA6B,EAA7B,CAAD,CAA9B;;AACA,MAAI,CAACP,IAAI,CAACQ,MAAV,EAAkB;AAChB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAAG,CAACK,MAAxB,EAAgCC,CAAC,EAAjC,EAAqC;AACnCT,MAAAA,IAAI,CAACU,IAAL,eAAUd,SAAS,EAAnB;AACD;AACF;;AAED,QAAMe,WAAW,GAAG,CAACC,KAAD,EAAgBC,IAAhB,KAAiC;AAAA;;AACnD,QAAIA,IAAJ,EAAU,SAAAb,IAAI,CAACY,KAAK,GAAG,CAAT,CAAJ,iEAAiBE,OAAjB,gEAA0BC,KAA1B,GAAV,KACK,UAAAf,IAAI,CAACY,KAAK,GAAG,CAAT,CAAJ,oEAAiBE,OAAjB,kEAA0BC,KAA1B;AACN,GAHD;;AAKA,sBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC;AAApB,KACGd,GAAG,CAACe,GAAJ,CAAQ,CAACC,CAAD,EAAIP,KAAJ,kBACP,oBAAC,QAAD;AACE,IAAA,KAAK,EAAET,GAAG,CAACS,KAAD,CADZ;AAEE,IAAA,KAAK,EAAE;AAAEQ,MAAAA,eAAe,EAAE;AAAnB,KAFT;AAGE,IAAA,YAAY,EAAGP,IAAD,IAAU;AACtBV,MAAAA,GAAG,CAACS,KAAD,CAAH,GAAaC,IAAb;AACAT,MAAAA,MAAM,CAAC,CAAC,GAAGD,GAAJ,CAAD,CAAN;AACAQ,MAAAA,WAAW,CAACC,KAAD,EAAQC,IAAR,CAAX;AACAX,MAAAA,KAAK,CAACmB,YAAN,CAAmBlB,GAAG,CAACmB,QAAJ,GAAeC,UAAf,CAA0B,GAA1B,EAA+B,EAA/B,CAAnB;AACD,KARH;AASE,IAAA,cAAc,EAAEP,MAAM,CAACQ,QATzB;AAUE,IAAA,SAAS,EAAE,CAVb;AAWE,IAAA,GAAG,EAAEZ,KAXP;AAYE,IAAA,GAAG,EAAEZ,IAAI,CAACY,KAAD;AAZX,IADD,CADH,CADF;AAoBD;AAED,MAAMI,MAAM,GAAGlB,UAAU,CAAC2B,MAAX,CAAkB;AAC/BR,EAAAA,OAAO,EAAE;AACPS,IAAAA,aAAa,EAAE;AADR,GADsB;AAI/BF,EAAAA,QAAQ,EAAE;AACRG,IAAAA,QAAQ,EAAE,EADF;AAERP,IAAAA,eAAe,EAAE,aAFT;AAGRQ,IAAAA,iBAAiB,EAAE9B,UAAU,CAAC+B,aAHtB;AAIRC,IAAAA,SAAS,EAAE;AAJH;AAJqB,CAAlB,CAAf","sourcesContent":["import React, { useState, createRef, RefObject } from 'react';\nimport { View, StyleSheet, TextInput } from 'react-native';\nimport FormItem from './FormItem';\n\ninterface Props {\n  numOfInput: number;\n  onChangeText: (pin: string) => string;\n}\n\nconst refs: RefObject<TextInput>[] = [];\nexport default function PinInput(props: Props) {\n  const [pin, setPin] = useState(Array(props.numOfInput).fill(''));\n  if (!refs.length) {\n    for (let i = 0; i < pin.length; i++) {\n      refs.push(createRef());\n    }\n  }\n\n  const changeFocus = (index: number, text: string) => {\n    if (text) refs[index + 1]?.current?.focus();\n    else refs[index - 1]?.current?.focus();\n  };\n\n  return (\n    <View style={styles.wrapper}>\n      {pin.map((_, index) => (\n        <FormItem\n          value={pin[index]}\n          style={{ backgroundColor: 'transparent' }}\n          onChangeText={(text) => {\n            pin[index] = text;\n            setPin([...pin]);\n            changeFocus(index, text);\n            props.onChangeText(pin.toString().replaceAll(',', ''));\n          }}\n          textInputStyle={styles.formItem}\n          maxLength={1}\n          key={index}\n          ref={refs[index]}\n        />\n      ))}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    flexDirection: 'row',\n  },\n  formItem: {\n    maxWidth: 30,\n    backgroundColor: 'transparent',\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    textAlign: 'center',\n  },\n});\n"]}