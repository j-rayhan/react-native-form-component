{"version":3,"sources":["Picker.tsx"],"names":["React","useState","createRef","View","StyleSheet","Pressable","ScrollView","Text","Platform","colors","Label","Modal","button","Picker","props","selectedValue","setSelectedValue","showPicker","setShowPicker","position","setPosition","x","y","width","height","label","labelStyle","labelWrapperStyle","asterik","asterikStyle","styles","pickerButton","buttonStyle","nativeEvent","OS","layout","current","measure","_x","_y","pageX","pageY","maxWidth","selectedValueStyle","items","filter","item","value","placeholder","childIconWrapper","iconWrapperStyle","pickerIcon","absoluteFillObject","elevation","wrapper","top","left","map","backgroundColor","blue","onSelection","itemLabelStyle","color","white","text","create","borderRadius","zIndex","maxHeight","flexGrow","borderWidth","borderColor","lightBlue","shadowColor","lightgrey","shadowOffset","shadowOpacity","shadowRadius","paddingVertical","paddingHorizontal","flexDirection","alignItems","justifyContent","paddingLeft","marginBottom","alignSelf","padding","borderTopRightRadius","borderBottomRightRadius","marginRight","borderTopColor","grey","borderTopWidth","borderLeftColor","borderRightColor","borderLeftWidth","borderRightWidth","borderBottomWidth"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  ReactText,\n  createRef,\n  RefObject,\n  ReactNode,\n} from 'react';\nimport {\n  View,\n  StyleSheet,\n  Pressable,\n  ScrollView,\n  Text,\n  Platform,\n} from 'react-native';\n\nimport { colors } from '../colors';\nimport Label from './Label';\nimport Modal from './Modal';\n\ninterface Item {\n  label: string;\n  value: ReactText;\n}\n\ninterface Props {\n  items: Array<Item>;\n  onSelection: (item: Item) => void;\n  selectedValue: ReactText;\n  pickerIcon?: ReactNode;\n  iconWrapperStyle?: object | object[];\n  asterik?: boolean;\n  labelStyle?: object | object[];\n  asterikStyle?: object | object[];\n  label?: ReactText;\n  labelWrapperStyle?: object | object[];\n  placeholder?: string;\n  selectedValueStyle?: object | object[];\n  buttonStyle?: object | object[];\n  itemLabelStyle?: object | object[];\n}\n\nconst button: RefObject<View> = createRef();\nexport default function Picker(props: Props) {\n  const [selectedValue, setSelectedValue] = useState(props.selectedValue);\n  const [showPicker, setShowPicker] = useState(false);\n  const [position, setPosition] = useState({ x: 0, y: 0, width: 0, height: 0 });\n  return (\n    <>\n      {props.label && (\n        <Label\n          text={props.label}\n          textStyle={props.labelStyle}\n          style={props.labelWrapperStyle}\n          asterik={props.asterik}\n          asterikStyle={props.asterikStyle}\n        />\n      )}\n      <Pressable\n        style={[styles.pickerButton, props.buttonStyle]}\n        onPress={() => {\n          setShowPicker(!showPicker);\n        }}\n        // @ts-ignore\n        ref={button}\n        onLayout={({ nativeEvent }) => {\n          if (Platform.OS === 'web')\n            setPosition({\n              height: nativeEvent.layout.height,\n              y: nativeEvent.layout.y,\n              width: nativeEvent.layout.width,\n              x: nativeEvent.layout.x,\n            });\n          else\n            button.current?.measure((_x, _y, width, height, pageX, pageY) => {\n              setPosition({\n                height: height,\n                y: pageY + height,\n                width: width,\n                x: pageX,\n              });\n            });\n        }}\n      >\n        <Text\n          style={[{ maxWidth: '90%' }, props.selectedValueStyle]}\n          numberOfLines={1}\n        >\n          {props.items.filter((item) => item.value === props.selectedValue)[0]\n            ?.label ||\n            props.placeholder ||\n            '--Pick a value--'}\n        </Text>\n\n        <View style={[styles.childIconWrapper, props.iconWrapperStyle]}>\n          {props.pickerIcon || <View style={styles.pickerIcon} />}\n        </View>\n      </Pressable>\n\n      <Modal show={showPicker}>\n        <Pressable\n          style={{ ...StyleSheet.absoluteFillObject, elevation: 3 }}\n          onPress={() => setShowPicker(false)}\n        >\n          <ScrollView\n            style={[\n              styles.wrapper,\n              {\n                width: position.width,\n                position: 'absolute',\n                top: position.y + position.height + 8,\n                left: position.x,\n              },\n            ]}\n            nestedScrollEnabled\n          >\n            {props.items.map((item) => (\n              <Pressable\n                key={item.value}\n                style={[\n                  styles.button,\n                  props.selectedValue === item.value\n                    ? { backgroundColor: colors.blue }\n                    : null,\n                ]}\n                onPress={() => {\n                  setSelectedValue(item.value);\n                  setShowPicker(false);\n                  props.onSelection(item);\n                }}\n              >\n                <Text\n                  style={[\n                    props.itemLabelStyle,\n                    {\n                      color:\n                        selectedValue === item.value\n                          ? colors.white\n                          : colors.text,\n                    },\n                  ]}\n                >\n                  {item.label}\n                </Text>\n              </Pressable>\n            ))}\n          </ScrollView>\n        </Pressable>\n      </Modal>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    backgroundColor: colors.white,\n    borderRadius: 4,\n    zIndex: 10,\n    maxHeight: 200,\n    flexGrow: 0,\n    borderWidth: 0.5,\n    borderColor: colors.lightBlue,\n    elevation: 50,\n    shadowColor: colors.lightgrey,\n    shadowOffset: { width: 0, height: 5 },\n    shadowOpacity: 1,\n    shadowRadius: 4,\n  },\n  button: {\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  pickerButton: {\n    borderRadius: 4,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingLeft: 8,\n    marginBottom: 24,\n    height: 44,\n    backgroundColor: colors.white,\n  },\n  childIconWrapper: {\n    backgroundColor: colors.white,\n    alignSelf: 'stretch',\n    justifyContent: 'center',\n    alignItems: 'stretch',\n    padding: 8,\n    borderTopRightRadius: 4,\n    borderBottomRightRadius: 4,\n    marginRight: 8,\n  },\n  pickerIcon: {\n    borderTopColor: colors.grey,\n    borderTopWidth: 10,\n    borderLeftColor: 'transparent',\n    borderRightColor: 'transparent',\n    borderLeftWidth: 9,\n    borderRightWidth: 9,\n    borderBottomWidth: 0,\n    borderRadius: 4,\n  },\n});\n"]}