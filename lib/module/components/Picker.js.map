{"version":3,"sources":["Picker.tsx"],"names":["React","useState","createRef","View","StyleSheet","Pressable","Modal","ScrollView","Text","colors","Label","button","ShrPicker","props","selectedValue","setSelectedValue","showPicker","setShowPicker","position","setPosition","x","y","width","height","label","styles","pickerButton","buttonStyle","current","measureInWindow","maxWidth","selectedValueStyle","items","filter","item","value","placeholder","childIconWrapper","childWrapperStyle","children","absoluteFillObject","wrapper","top","left","map","backgroundColor","blue","onSelection","itemLabelStyle","color","white","text","defaultProps","asterik","asterikStyle","create","borderRadius","zIndex","maxHeight","flexGrow","borderWidth","borderColor","lightBlue","elevation","shadowColor","lightgrey","shadowOffset","shadowOpacity","shadowRadius","paddingVertical","paddingHorizontal","flexDirection","alignItems","justifyContent","flex","paddingLeft","marginBottom","faintBlue","alignSelf","borderLeftWidth","padding","borderTopRightRadius","borderBottomRightRadius"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  ReactText,\n  createRef,\n  RefObject,\n  ReactNode,\n} from 'react';\nimport {\n  View,\n  StyleSheet,\n  Pressable,\n  Modal,\n  ScrollView,\n  Text,\n} from 'react-native';\nimport { colors } from 'src/colors';\nimport Label, { LabelProps } from './Label';\n\ninterface Item {\n  label: string;\n  value: ReactText;\n}\n\ninterface Props extends LabelProps {\n  items: Array<Item>;\n  onSelection: (item: Item) => void;\n  selectedValue: ReactText;\n  children?: ReactNode;\n  asterik?: boolean;\n  labelStyle?: object | object[];\n  asterikStyle?: object | object[];\n  label?: ReactText;\n  placeholder?: string;\n  selectedValueStyle?: object | object[];\n  buttonStyle?: object | object[];\n  childWrapperStyle?: object | object[];\n  itemLabelStyle?: object | object[];\n}\n\nconst button: RefObject<View> = createRef();\nexport default function ShrPicker(props: Props) {\n  const [selectedValue, setSelectedValue] = useState(props.selectedValue);\n  const [showPicker, setShowPicker] = useState(false);\n  const [position, setPosition] = useState({ x: 0, y: 0, width: 0, height: 0 });\n  return (\n    <>\n      {props.label && <Label {...props} />}\n      <Pressable\n        style={[styles.pickerButton, props.buttonStyle]}\n        onPress={() => {\n          button.current?.measureInWindow(\n            (x: number, y: number, width: number, height: number) =>\n              setPosition({ x, y, width, height })\n          );\n          setShowPicker(!showPicker);\n        }}\n        // @ts-ignore\n        ref={button}\n      >\n        <Text\n          style={[{ maxWidth: '90%' }, props.selectedValueStyle]}\n          numberOfLines={1}\n        >\n          {props.items.filter((item) => item.value === props.selectedValue)[0]\n            ?.label ||\n            props.placeholder ||\n            '--Pick a value--'}\n        </Text>\n\n        <View style={[styles.childIconWrapper, props.childWrapperStyle]}>\n          {props.children}\n        </View>\n      </Pressable>\n\n      <Modal transparent visible={showPicker}>\n        <Pressable\n          style={{ ...StyleSheet.absoluteFillObject }}\n          onPress={() => setShowPicker(false)}\n        >\n          <ScrollView\n            style={[\n              styles.wrapper,\n              {\n                top: position.height + position.y + 8,\n                width: position.width,\n                left: position.x,\n              },\n            ]}\n            nestedScrollEnabled\n          >\n            {props.items.map((item) => (\n              <Pressable\n                key={item.value}\n                style={[\n                  styles.button,\n                  props.selectedValue === item.value\n                    ? { backgroundColor: colors.blue }\n                    : null,\n                ]}\n                onPress={() => {\n                  setSelectedValue(item.value);\n                  setShowPicker(false);\n                  props.onSelection(item);\n                }}\n              >\n                <Text\n                  style={[\n                    props.itemLabelStyle,\n                    {\n                      color:\n                        selectedValue === item.value\n                          ? colors.white\n                          : colors.text,\n                    },\n                  ]}\n                >\n                  {item.label}\n                </Text>\n              </Pressable>\n            ))}\n          </ScrollView>\n        </Pressable>\n      </Modal>\n    </>\n  );\n}\n\nShrPicker.defaultProps = {\n  asterik: false,\n  asterikStyle: {},\n  buttonStyle: {},\n};\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    backgroundColor: colors.white,\n    borderRadius: 4,\n    zIndex: 1,\n    maxHeight: 200,\n    flexGrow: 0,\n    borderWidth: 0.5,\n    borderColor: colors.lightBlue,\n    elevation: 4,\n    shadowColor: colors.lightgrey,\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 1,\n    shadowRadius: 4,\n  },\n  button: {\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  pickerButton: {\n    borderWidth: 1,\n    borderColor: colors.lightBlue,\n    borderRadius: 4,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    flex: 1,\n    paddingLeft: 8,\n    height: 44,\n    marginBottom: 24,\n  },\n  childIconWrapper: {\n    backgroundColor: colors.faintBlue,\n    alignSelf: 'stretch',\n    justifyContent: 'center',\n    alignItems: 'stretch',\n    borderLeftWidth: 1,\n    borderColor: colors.faintBlue,\n    padding: 8,\n    borderTopRightRadius: 4,\n    borderBottomRightRadius: 4,\n  },\n});\n"]}