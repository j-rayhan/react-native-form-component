{"version":3,"sources":["FormItem.test.js"],"names":["React","render","fireEvent","FormItem","describe","it","getByTestId","getByText","expect","toBeTruthy","queryByText","toBeNull"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,+BAAlC;AAEA,OAAOC,QAAP,MAAqB,IAArB;AAEAC,QAAQ,CAAC,+BAAD,EAAkC,MAAM;AAC9CC,EAAAA,EAAE,CAAC,0CAAD,EAA6C,MAAM;AACnD,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAA6BN,MAAM,eACvC,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAC,WAAhB;AAA4B,MAAA,YAAY,EAAC;AAAzC,MADuC,CAAzC;AAIAC,IAAAA,SAAS,CAACI,WAAW,CAAC,OAAD,CAAZ,EAAuB,MAAvB,CAAT;AACAE,IAAAA,MAAM,CAACD,SAAS,CAAC,qBAAD,CAAV,CAAN,CAAyCE,UAAzC;AACD,GAPC,CAAF;AASAJ,EAAAA,EAAE,CAAC,0DAAD,EAA6D,MAAM;AACnE,UAAM;AAAEC,MAAAA,WAAF;AAAeI,MAAAA;AAAf,QAA+BT,MAAM,eACzC,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAC,oBAAhB;AAAqC,MAAA,YAAY,EAAC;AAAlD,MADyC,CAA3C;AAIAC,IAAAA,SAAS,CAACI,WAAW,CAAC,OAAD,CAAZ,EAAuB,MAAvB,CAAT;AACAE,IAAAA,MAAM,CAACE,WAAW,CAAC,qBAAD,CAAZ,CAAN,CAA2CC,QAA3C;AACD,GAPC,CAAF;AAQD,CAlBO,CAAR;AAoBAP,QAAQ,CAAC,gCAAD,EAAmC,MAAM;AAC/CC,EAAAA,EAAE,CAAC,0CAAD,EAA6C,MAAM;AACnD,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAA6BN,MAAM,eACvC,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAC,QAAhB;AAAyB,MAAA,YAAY,EAAC;AAAtC,MADuC,CAAzC;AAIAC,IAAAA,SAAS,CAACI,WAAW,CAAC,OAAD,CAAZ,EAAuB,MAAvB,CAAT;AACAE,IAAAA,MAAM,CAACD,SAAS,CAAC,gBAAD,CAAV,CAAN,CAAoCE,UAApC;AACD,GAPC,CAAF;AAQD,CATO,CAAR","sourcesContent":["import React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\n\nimport FormItem from './';\n\ndescribe('test email input to FormInput', () => {\n  it('renders error when email format is wrong', () => {\n    const { getByTestId, getByText } = render(\n      <FormItem value=\"xyz@mail.\" keyboardType=\"email-address\" />\n    );\n\n    fireEvent(getByTestId('input'), 'blur');\n    expect(getByText('Enter a valid email')).toBeTruthy();\n  });\n\n  it('does not render email error when email format is correct', () => {\n    const { getByTestId, queryByText } = render(\n      <FormItem value=\"giwaklaz@gmail.com\" keyboardType=\"email-address\" />\n    );\n\n    fireEvent(getByTestId('input'), 'blur');\n    expect(queryByText('Enter a valid email')).toBeNull();\n  });\n});\n\ndescribe('test number input to FormInput', () => {\n  it('renders error if a non number is entered', () => {\n    const { getByTestId, getByText } = render(\n      <FormItem value=\"1472ad\" keyboardType=\"numeric\" />\n    );\n\n    fireEvent(getByTestId('input'), 'blur');\n    expect(getByText('Invalid number')).toBeTruthy();\n  });\n});\n"]}