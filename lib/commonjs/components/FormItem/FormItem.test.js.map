{"version":3,"sources":["FormItem.test.js"],"names":["describe","it","getByTestId","getByText","expect","toBeTruthy","getByDisplayValue","queryByText","toBeNull","toBeFalsy","element","props","errorBorderColor","toBe"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\n\nimport FormItem from './';\n\ndescribe('test email input to FormInput', () => {\n  it('renders error when email format is wrong', () => {\n    const { getByTestId, getByText } = render(\n      <FormItem value=\"xyz@mail.\" keyboardType=\"email-address\" />\n    );\n\n    fireEvent(getByTestId('input'), 'blur');\n    expect(getByText('Enter a valid email')).toBeTruthy();\n  });\n\n  it('does not render email error when email format is correct', () => {\n    const { getByDisplayValue, queryByText } = render(\n      <FormItem value=\"giwaklaz@gmail.com\" keyboardType=\"email-address\" />\n    );\n\n    fireEvent(getByDisplayValue('giwaklaz@gmail.com'), 'blur');\n    expect(queryByText('Enter a valid email')).toBeNull();\n  });\n});\n\ndescribe('test number input to FormInput', () => {\n  it('renders error if a non number is entered', () => {\n    const { getByDisplayValue, getByText } = render(\n      <FormItem value=\"1472ad\" keyboardType=\"numeric\" />\n    );\n\n    fireEvent(getByDisplayValue('1472ad'), 'blur');\n    expect(getByText('Invalid number')).toBeTruthy();\n  });\n});\n\ndescribe('test behaviour when an error occurs', () => {\n  it('should not show error icon when showErrorIcon is false', () => {\n    const { getByDisplayValue, queryByText } = render(\n      <FormItem value=\"\" showErrorIcon={false} isRequired />\n    );\n\n    fireEvent(getByDisplayValue(''), 'blur');\n    expect(queryByText('\\u0021')).toBeFalsy();\n  });\n\n  it('should show error icon when an error occurs', () => {\n    const { getByDisplayValue, queryByText } = render(\n      <FormItem value=\"\" isRequired />\n    );\n\n    fireEvent(getByDisplayValue(''), 'blur');\n    expect(queryByText('\\u0021')).toBeTruthy();\n  });\n\n  it('error border color can be set to any color', () => {\n    const { getByDisplayValue } = render(\n      <FormItem value=\"\" errorBorderColor=\"green\" />\n    );\n\n    const element = getByDisplayValue('');\n    fireEvent(element, 'blur');\n    expect(element.props.errorBorderColor).toBe('green');\n  });\n});\n"]}